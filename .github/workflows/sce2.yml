name: Check and Increment Version on Merge

on:
  pull_request:
    types:
      - synchronize


jobs:
  print-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get tag
        id: get-tag
        run: |
          echo ${{ github.event.pull_request.base.ref }}
          git fetch --unshallow --tags
          if [[ ${{ github.event.pull_request.base.ref }} == "master" ]]; then
            TAG=$(git describe --abbrev=0 --tags)
          elif [[ ${{ github.event.pull_request.base.ref }} =~ ^release\/v[0-9]+\.[0-9]+$ ]]; then
            RELEASE_VERSION=$(echo ${{ github.event.pull_request.base.ref }} | cut -d '/' -f 2)
            echo $RELEASE_VERSION
            TAG=$(git describe --abbrev=0 --tags --match $RELEASE_VERSION*)
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Get version components
        id: version_components
        run: |
          echo ${{ steps.get-tag.outputs.tag }}
          components=$(echo ${{ steps.get-tag.outputs.tag }} | sed 's/v//; s/-.*//')
          major=$(echo $components | cut -d '.' -f 1)
          minor=$(echo $components | cut -d '.' -f 2)
          patch=$(echo $components | cut -d '.' -f 3)
      - name: Update latest tag
        id: update_tag
        run: |
          SEMVER_REGEX="\+semver:(major|minor|patch|pre|build)"
          if [[ ${{ github.event.pull_request.title }} =~ $SEMVER_REGEX ]]; then
            SEMVER_TYPE=${BASH_REMATCH[1]}
          elif [[ ${{ github.event.pull_request.body }} =~ $SEMVER_REGEX ]]; then
            SEMVER_TYPE=${BASH_REMATCH[1]}
          fi
          case "v1.0.0-alpha+100" in
          
            "+semver:major")
              new_tag="v$((major+1)).0.0-alpha+${{ github.run_number }}"
              ;;
          
            "+semver:minor")
              new_tag="v${{ major }}.$((minor+1)).0-alpha+${{ github.run_number }}"
              ;;
          
            "+semver:patch")
              if [[ "${{ github.event.pull_request.base.ref }}" == release-* ]]; then
                latest_tag=$(git tag --list "v${{ major }}.${{ minor }}.*-alpha*" | sort -Vr | head -n1)
              fi
              patch_pre_build=$(echo "${{ latest_tag }}" | sed 's/.*-//')
              new_tag="v${{ major }}.${{ minor }}.$((patch+1))-alpha+${{ patch_pre_build+1 }}"
              ;;
          
            "+semver:pre")
              pre=$(echo "${{ github.event.pull_request.title }}" | sed -n 's/^.*+semver:pre-\([^ ]*\).*$/\1/p')
              case "${{ latest_tag }}" in
                *-alpha*)
                  new_tag=$(echo "${{ latest_tag }}" | sed "s/-alpha/-${{ pre }}/")
                  ;;
                *-beta*)
                  new_tag=$(echo "${{ latest_tag }}" | sed "s/-beta/-${{ pre }}/")
                  ;;
                *-rc*)
                  new_tag=$(echo "${{ latest_tag }}" | sed "s/-rc/-${{ pre }}/")
                  ;;
              esac
          esac
          echo $new_tag